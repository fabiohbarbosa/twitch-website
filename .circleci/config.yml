version: 2

# default node docker image
default_image: &default_image
  docker:
    - image: node:11.1.0

# working directory to use in all jobs
working_directory: &working_directory
  working_directory: ~/repo

# get archive files
attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/repo

# archive workspace
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: ~/repo
    paths: ./**

# configure gcloud authetication
set_gcp_auth: &set_gcp_auth
  run:
    name: Set GCP auth
    command: |
      echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
      gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      gcloud auth configure-docker --quiet

# configure job to run only on master branch
only_master: &only_master
  branches:
    only:
      - master

jobs:
  install:
    <<: *working_directory
    <<: *default_image
    steps:
      - checkout
      - restore_cache: # Download and cache dependencies
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: npm i
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - <<: *persist_to_workspace

  test:
    <<: *working_directory
    <<: *default_image
    steps:
      - <<: *attach_workspace
      - run:
          name: Run tests
          command: npm test

      # - run:
      #     name: Send coverage reports to coveralls
      #     command: npm run coverage

  lint:
    <<: *working_directory
    <<: *default_image
    steps:
      - <<: *attach_workspace
      - run:
          name: Run lint
          command: npm run lint

  patch_version:
    <<: *working_directory
    <<: *default_image
    steps:
      - <<: *attach_workspace

      - run:
          name: Configure git to push
          command: |
            rm -rf ${HOME}/.gitconfig
            git config --global push.default simple
            git config --global user.name "CircleCI"
            git config --global user.email fabiohbarbosa@gmail.com
            git remote add circleci https://fabiohbarbosa:${GITHUB_TOKEN}@github.com/fabiohbarbosa/twitch-website.git

      - run:
          name: Make a checkout to prevent possible changes did in install job
          command: |
            git checkout package.json package-lock.json

      - run:
          name: Patch version
          command: |
            npm version patch -m "Release patch from SHA1:${CIRCLE_SHA1} [ci skip]"
            git pull circleci master
            git push circleci master --tags
            node -p -e 'require(`./package.json`).version' > VERSION
      - <<: *persist_to_workspace

  build:
    <<: *working_directory
    docker:
      - image: google/cloud-sdk
    environment:
      GCP_PROJECT: twitch-223000
      GROUP: frontend
      SERVICENAME: website
    steps:
      - <<: *attach_workspace

      # Enable DIND feature
      - setup_remote_docker:
         docker_layer_caching: true

      - run:
          name: Build docker image
          command: |
            VERSION=$(head -n 1 VERSION) # load $VERSION from file
            echo "gcr.io/$GCP_PROJECT/$GROUP/$SERVICENAME:$VERSION"
            docker build -t gcr.io/$GCP_PROJECT/$GROUP/$SERVICENAME:$VERSION .

      - <<: *set_gcp_auth

      - run:
          name: Push docker image to GCP dev registry
          command: |
            VERSION=$(head -n 1 VERSION) # load $VERSION from file
            echo "gcr.io/$GCP_PROJECT/$GROUP/$SERVICENAME:$VERSION"
            docker push gcr.io/$GCP_PROJECT/$GROUP/$SERVICENAME:$VERSION

      - <<: *persist_to_workspace

  deploy:
    <<: *working_directory
    docker:
      - image: google/cloud-sdk
    environment:
      GCP_PROJECT: twitch-223000
      CLUSTER: twitch
      CLUSTER_ZONE: europe-west1-c
      ENVIRONMENT: prod
      REPLICAS: 3

    steps:
      - <<: *attach_workspace
      - <<: *set_gcp_auth

      - run:
          name: Set kubernetes cluster
          command: |
            gcloud config set container/use_client_certificate True
            gcloud container clusters get-credentials $CLUSTER --zone $CLUSTER_ZONE --project $GCP_PROJECT

      - run:
          name: Create service.yaml kubernetes deploy file
          command: |
            VERSION=$(head -n 1 VERSION) # load $VERSION from file
            bash files/deploy_kubernetes.sh $VERSION

      - run:
          name: Kubernetes apply
          command: kubectl apply -f service.yaml

  healthcheck:
    docker:
      - image: alpine
    environment:
      HEALTHCHECK: /website/healthcheck
    steps:
      - run:
          name: Install curl
          command: apk add curl --update

      - run:
          name: Healthcheck
          command: curl -I ${ENV_URL}${HEALTHCHECK} --fail

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install:
          context: twitch-envs

      - test:
          context: twitch-envs
          requires:
            - install
      - lint:
          context: twitch-envs
          requires:
            - install

      - patch_version:
          context: twitch-envs
          requires:
            - test
            - lint
          filters:
            <<: *only_master

      - build:
          context: twitch-envs
          requires:
            - patch_version
          filters:
            <<: *only_master

      - deploy:
          context: twitch-envs
          requires:
            - build
          filters:
            <<: *only_master

      - healthcheck:
          context: twitch-envs
          requires:
            - deploy
          filters:
            <<: *only_master
